#!/usr/bin/env babel-node

import fs from 'fs';
import path from 'path';
import glob from 'glob';

function renderIcon(className, svgIcon) {
  svgIcon = svgIcon.replace(/<svg /, '<svg className={this.props.className} ');
  svgIcon = svgIcon.replace(/    /g, '  ').replace(/"/g, '\'');
  svgIcon = svgIcon.replace(/id=([^ >]*)[" ]?/g, '');
  svgIcon = svgIcon.replace(/\n/g, '\n        ');
  return `import React from 'react';
  /*eslint-disable*/
  // Warning! Autogenerated - do not edit. Edit SVG icons in public/images/icons.
  export default class ${className} extends React.Component {
    displayName = '${className}'

    static propTypes = {
      className: React.PropTypes.string.isRequired
    };

    render() {
      return (
        ${svgIcon}
      );
    }
  }
  `.replace(/\n  /g, '\n').replace(/^\s*[\r\n]/gm, '\n').replace(/\t/g, '  ') + '\n';
}

function processSvg() {
  var base = './public/images/icons/';
  glob(base + '*.svg', function(err, icons) {
    if (err) { throw err; }
    console.log('Rendering ' + icons.length + ' icons.');
    icons.forEach(function(icon) {
      var iconData = fs.readFileSync(icon).toString();
      var classBase = icon.replace(/(\-icon)?\.svg/, '').substr(base.length);
      var className = classBase.replace(/-[A-Za-z]/g, function(match) {
        return match.toUpperCase().substr(1);
      });
      className = className.charAt(0).toUpperCase() + className.slice(1);
      var newIcon = renderIcon(className + 'Icon', iconData);
      fs.writeFileSync('./app/icons/svg/' + classBase + '.js', newIcon);
    });
  });
}

function checkSvg() {
  glob('./app/icons/svg/*.js', function(err, icons){ 
    if (err) { throw err; }
    console.log(`Verifying ${icons.length} icons`);
    icons.forEach(function(icon) {
      try {
        var out = require(path.join(__dirname, '../../', icon.substr(0, icon.length - 3)));
      } catch (e) {
        console.log(`Syntax error found for ${icon}, generated icon invalid.`);
        console.log(e);
      }
    });
  });
}

processSvg();
checkSvg();
